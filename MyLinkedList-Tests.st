TestCase subclass: #MyLinkedListTest	instanceVariableNames: ''	classVariableNames: ''	package: 'MyLinkedList-Tests'!!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 2/2/2021 17:43'!testRemoveLastElement	| list node1 node2 emptyList|	list := MyLinkedList new.		node1 := Node new.	node1 setValue: 1.	node2 := Node new.	node2 setValue: 2.	list addInLast: node1.	list addInLast: node2.		"firstly, we ensure that the tail of the list is node2"	self assert: node2 equals: list tail.	"then, we ensure that the deleted element is returned"	self assert: node2 equals: list removeLastElement.	"Now, we ensure that the tail of the list is now the node1"	self assert: node1 equals: list tail.	"So, we ensure that the next cell of node1 is null"	self assert: node1 getNextValue equals: nil.		"----- case: try removing an empty list -----"	emptyList := MyLinkedList new.	"when trying to remove an element from an empty list, we ensure the error is raised"	self should: [emptyList removeLastElement] raise: NotFound ! !!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 2/1/2021 00:19'!testAddInFirst	| list element1 element2 |	list := MyLinkedList new.		element1 := Node new setValue: 1.	list addInFirst: element1.		element2 := Node new setValue: 2.	list addInFirst: element2.		self assert: list head equals: element2.	self assert: list head getPreviousValue  equals: nil.	self assert: list head getNextValue  equals: element1.		self assert: list tail equals: element1.	self assert: list tail getPreviousValue  equals: element2 .	self assert: list tail getNextValue  equals: nil.! !!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 1/31/2021 19:52'!testIsEmpty	| list |	list := MyLinkedList new.	self assert: list isEmpty ! !!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 2/1/2021 00:20'!testAddInLast	| list element1 element2 |	list := MyLinkedList new.		element1 := Node new setValue: 1.	element2 := Node new setValue: 2.		list addInLast: element1.	list addInLast: element2.		self assert: list head equals: element1.	self assert: list head getPreviousValue equals: nil.	self assert: list head getNextValue equals: element2.		self assert: list tail equals: element2.	self assert: list tail getPreviousValue equals: element1.	self assert: list tail getNextValue equals: nil.! !!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 2/2/2021 17:43'!testRemoveFirstElement	| list emptyList node1 node2 |	list := MyLinkedList new.		node1 := Node new.	node1 setValue: 1.	node2 := Node new.	node2 setValue: 2.	list addInLast: node1.	list addInLast: node2.		"firstly, we ensure that the head of the list is node1"	self assert: node1 equals: list head.	"then, we ensure that the deleted element is returned"	self assert: node1 equals: list removeFirstElement.	"Now, we ensure that the head of the list is now the node2"	self assert: node2 equals: list head.	"So, we ensure that the previous cell of node2 is null"	self assert: node2 getPreviousValue equals: nil.		"----- case: try removing an empty list -----"	emptyList := MyLinkedList new.	"when trying to remove an element from an empty list, we ensure that the error is raised"	self should: [emptyList removeFirstElement] raise: NotFound ! !!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 1/31/2021 19:52'!testInitialization 	MyLinkedList new! !!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 2/1/2021 01:57'!testSize 	| list |	list := MyLinkedList new.	self assert: list size equals: 0.		list addInLast: Node new.	self assert: list size equals: 1.! !!MyLinkedListTest methodsFor: 'tests' stamp: 'idtalebreda 2/2/2021 17:52'!testGetElementAt	| list node1 node2 node3 elemAt1 elemAt2 elemAt3 |	list := MyLinkedList new.	"------ Creating nodes ------"	node1 := Node new.	node1 setValue: 2.	node2 := Node new.	node2 setValue: 5.	node3 := Node new.	node3 setValue: 4.	"------ Adding nodes in the list ------"	list addInLast: node1.	list addInLast: node2.	list addInLast: node3.	"------ recovering each elements ------"	elemAt1 := list getElementAt: 1.	elemAt2 := list getElementAt: 2.	elemAt3 := list getElementAt: 3.	"------ equality test between each element recovered and the element accessed "	self assert: elemAt1 equals: node1.	self assert: elemAt2 equals: node2.	self assert: elemAt3 equals: node3.	"----- Case: index out of bounds -----"	self should: [list getElementAt: 4] raise: NotFound.	"----- Case: emptyList -----"	list := MyLinkedList new.	self should: [list getElementAt: 1 ] raise: CollectionIsEmpty  .	! !TestCase subclass: #NodeTest	instanceVariableNames: ''	classVariableNames: ''	package: 'MyLinkedList-Tests'!!NodeTest methodsFor: 'tests' stamp: 'idtalebreda 1/31/2021 17:48'!testAccesingValueOfNode	| node |	node := Node new.	self assert: node getValue equals: nil.	node setValue: 1.	self assert: node getValue equals: 1! !!NodeTest methodsFor: 'tests' stamp: 'idtalebreda 1/31/2021 17:51'!testAccesingNextValueOfNode	| node number|	number := 2.	node := Node new.	self assert: node getNextValue equals: nil.	node setNextValue: number.	self assert: node getNextValue equals: number! !!NodeTest methodsFor: 'tests' stamp: 'idtalebreda 1/31/2021 17:37'!testCreationNodeOk	Node new! !